# RustyFix Workspace Configuration
# Financial Information eXchange (FIX) protocol implementation in pure Rust

[workspace]
members = ["crates/*", "examples/*"]
resolver = "2"

[workspace.package]
authors = ["cognitive-glitch", "Team Rusty Trading", "Filippo Neysofu Costa"]
version = "0.7.2"
edition = "2024"
homepage = "https://github.com/rusty-trading/rusty-fix-engine"
repository = "https://github.com/rusty-trading/rusty-fix-engine"
description = "FIX & FAST (FIX Adapted for STreaming) in pure Rust"
publish = true
readme = "README.md"
keywords = ["fix", "fast", "protocol", "finance", "fintech"]
categories = ["network-programming", "parser-implementations", "encoding"]
license = "Apache-2.0"

# Workspace-wide linting configuration
[workspace.lints.rust]
rust-2024-compatibility = "warn"
rust-2024-incompatible-pat = "warn"
unsafe_code = "deny"
missing_docs = "warn"
unreachable_pub = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_qualifications = "warn"

[workspace.lints.clippy]
all = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
# Performance lints
inefficient_to_string = "warn"
large_types_passed_by_value = "warn"
# Correctness lints  
fallible_impl_from = "warn"
unwrap_used = "warn"
expect_used = "warn"
panic = "warn"
# Style lints
module_name_repetitions = "allow" # Allow for clear module naming
similar_names = "allow"           # Allow similar parameter names

# Shared dependencies across workspace crates
# Following project guidelines to use high-performance alternatives
[workspace.dependencies]
# Core performance libraries (mandatory per guidelines)
rustc-hash = "2.1"  # Fast non-cryptographic hashing
smallvec = "1.13"   # Stack-allocated vectors for small collections
smartstring = "1.0" # Small string optimization  
simd-json = "0.15"  # High-performance JSON parsing
quanta = "0.12"     # High-resolution timing

# Common utility libraries
log = "0.4"       # Logging facade
thiserror = "2.0" # Error handling
anyhow = "1.0"    # Error context
bytes = "1.8"     # Byte buffer utilities

# Async/networking libraries  
tokio = { version = "1.42", features = ["full"] }
flume = "0.11"                                    # High-performance channels

# Serialization
serde = { version = "1.0", features = ["derive"] }

# Testing utilities
criterion = "0.6" # Benchmarking

# Development tools
tracing = "0.1"            # Structured logging
tracing-subscriber = "0.3" # Tracing subscriber implementations

# FIX protocol specific
rust_decimal = { version = "1.37", features = ["macros"] }

# Release profile - optimized for production performance
[profile.release]
lto = true              # Enable link-time optimization
opt-level = 3           # Maximum optimization
codegen-units = 1       # Single codegen unit for better optimization
strip = true            # Strip debug symbols
debug = false           # No debug info
overflow-checks = false # Disable overflow checks for performance
rpath = false           # Disable rpath
panic = "abort"         # Abort on panic for smaller binary

# Release build dependencies optimization  
[profile.release.build-override]
opt-level = 3
codegen-units = 1

# Package-specific release optimization
[profile.release.package."*"]
opt-level = 3

# Development profile - optimized for fast compile times
[profile.dev]
incremental = false    # Disable incremental compilation for macro-heavy code
opt-level = 0          # No optimization for fastest builds
debug = true           # Enable debug info
overflow-checks = true # Enable overflow checks for safety

# Build script optimization for development
[profile.dev.build-override]
# Helps with compile times for macro-heavy code
# See: https://corrode.dev/blog/tips-for-faster-rust-compile-times/
opt-level = 1
